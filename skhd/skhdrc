# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# ===============================================
# chaning window focus
# ===============================================

# focus window
alt - h : yabai -m window --focus west
alt - l : yabai -m window --focus east
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
# alt - s : yabai -m window --focus recent

# focus monitor
alt - 0  : yabai -m display --focus next
alt - 9  : yabai -m display --focus prev
# shift + alt - 1  : yabai -m display --focus 1
# shift + alt - 2  : yabai -m display --focus 2
# shift + alt - 3  : yabai -m display --focus 3
alt - p  : yabai -m window --focus stack.prev || yabai -m window --focus stack.last
alt - n  : yabai -m window --focus stack.next || yabai -m window --focus stack.first

# ===============================================
# Modifying the layout
# ===============================================

# swap managed window

# rotate layout clockwise
alt - r : yabai -m space --rotate 270

# flip along y-axis
alt - y : yabai -m space --mirror y-axis

# flip along x-axis
alt - x : yabai -m space --mirror x-axis

# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 8:8:1:1:6:6

# Set layout of the space (options: bsp, float)
alt - q : yabai -m space --layout float

# Set layout of the space (options: bsp, float)
alt - b : yabai -m space --layout bsp

# Set layout of the space (options: bsp, float)
alt - s : yabai -m space --layout stack

# center on screen
alt - m : yabai -m window --grid 8:8:1:1:6:6

# Set insertion point for focused container
# shift + cmd - h : yabai -m window --insert west
# shift + cmd - j : yabai -m window --insert south
# shift + cmd - k : yabai -m window --insert north
# shift + cmd - l : yabai -m window --insert east

# ===============================================
# Modifying Window Size
# ===============================================

# balance size of windows
shift + alt - b : yabai -m space --balance

alt - f : yabai -m window --toggle zoom-fullscreen

# ===============================================
# Moving Window Around
# ===============================================
shift + alt - h : yabai -m window --swap west
shift + alt - l : yabai -m window --swap east
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
# shift + alt - s : yabai -m window --swap recent

# send window to desktop
shift + alt - 0 : yabai -m window --space next
shift + alt - 9 : yabai -m window --space prev
shift + alt - 1 : yabai -m window --space  1
shift + alt - 2 : yabai -m window --space  2
shift + alt - 3 : yabai -m window --space  3
shift + alt - 4 : yabai -m window --space  4
shift + alt - 5 : yabai -m window --space  5
shift + alt - 6 : yabai -m window --space  6
shift + alt - 7 : yabai -m window --space  7

# send window to monitor and follow focus
ctrl + alt - 0  : yabai -m window --display next; yabai -m display --focus next
ctrl + alt - 9  : yabai -m window --display prev; yabai -m display --focus prev
ctrl + alt - 1  : yabai -m window --display 1; yabai -m display --focus 1
ctrl + alt - 2  : yabai -m window --display 2; yabai -m display --focus 2
ctrl + alt - 3  : yabai -m window --display 3; yabai -m display --focus 3


# ===============================================
# Moving Window Around
# ===============================================
ctrl + alt - q : brew services stop yabai
ctrl + alt - s : brew services start yabai
